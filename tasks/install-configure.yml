---
- name: Download redis artifact
  unarchive:
    src: "http://download.redis.io/releases/redis-{{ redis_version }}.tar.gz"
    dest: /opt/
    remote_src: yes

- name: Build runtime dependencies for redis
  make:
    chdir: /opt/redis-{{ redis_version }}

- name: Install redis server
  make:
    chdir: /opt/redis-{{ redis_version }}
    target: install

- name: Deleting the downloaded redis package
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "/opt/redis-{{ redis_version }}.tar.gz"
    - "/opt/redis-{{ redis_version }}"

- name: Creating group for redis
  group:
    name: "redis"
    state: present

- name: Creating system user for redis
  user:
    name: "redis"
    group: "redis"
    shell: /sbin/nologin
    password: "!!"
    createhome: no
    system: yes
    state: present

- name: Creating logfile directory
  file:
    path: "/var/log/redis"
    state: directory
    recurse: yes
    owner: redis
    group: redis

- name: Creating redis data directory
  file:
    path: "{{ redis_dir }}"
    state: directory
    recurse: yes
    owner: redis
    group: redis

- name: create "{{ redis_conf_file_location }}" directory
  file:
    path: "{{ redis_conf_file_location }}"
    state: directory
    recurse: yes
    owner: redis
    group: redis

- name: Copy redis.conf
  template:
    src: redis.conf.j2
    dest: "{{ redis_conf_file_location }}/redis.conf"
    owner: redis
    group: redis
  notify: Restart Redis Service

- name: Copy redis.service file
  template:
    src: redis.service.j2
    dest: "/etc/systemd/system/redis.service"
    owner: root
    group: root
  notify:
    - Reload Redis Service
    - Restart Redis Service

- name: Reload redis service
  systemd:
    daemon_reload: yes

- name: Restart Redis Service
  systemd:
    name: redis.service
    enabled: yes
    state: started

- name: Create redis check command without passsword
  set_fact:
    redis_check_command: redis-cli cluster nodes
  when: redis_password is not defined

- name: Create redis check command with password
  set_fact:
    redis_check_command: redis-cli cluster nodes -a {{ redis_password }} | replace('\n', '')
  when: redis_password is not defined

- name: Check Redis Cluster
  command: redis-cli cluster nodes
  when: inventory_hostname in groups['cluster-formation-node']
  register: command_result

- name: Setting fact for cluster create command without password
  set_fact:
    cluster_create_command: >
      "redis-cli --cluster create {{ redis_nodeip_port_list }}
      --cluster-replicas {{ redis_cluster_replicas }} --cluster-yes"
  when: redis_password is not defined

- name: Setting fact for cluster create command without password
  set_fact:
    cluster_create_command: >
      "redis-cli --cluster create {{ redis_nodeip_port_list }}
      --cluster-replicas {{ redis_cluster_replicas }} --cluster-yes -a {{ redis_password }} | replace('\n', '')"
  when: redis_password is defined

- name: Create Redis Cluster
  command: >
    "{{ cluster_create_command }}"
  args:
    stdin: "yes"
  when: >
    inventory_hostname in groups['cluster-formation-node'] and
    command_result.stdout.split('\n')|length != groups['redis-nodes']|length
