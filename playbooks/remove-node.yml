---
- hosts: redis_cluster
  vars:
    redis_password: Opstree@1234
    leader_redis_port: 6379
    follower_redis_port: 6380
  tasks:
    - name: Ensuring the temporary file is created before execution
      local_action:
        module: file
        path: /tmp/node-removal
        state: touch

    - name: Ensure redis-cli is generated without password
      set_fact:
        redis_command: redis-cli
      when: redis_password == ""

    - name: Ensure redis-cli is generated with password
      set_fact:
        redis_command: "redis-cli -a {{ redis_password }}"
      when: redis_password is defined and redis_password != ""

    - name: Ensure if redis cluster exists or not
      command: |-
        {{ redis_command }} cluster nodes
      register: command_result

    - name: Ensure the nodes need to removed are present in temporary file
      local_action:
        module: copy
        content: "{{ command_result.stdout_lines | select('search', ansible_ssh_host + ':' + redis_port|string) }}"
        dest: /tmp/node-removal
      when: >
        node_status == 'remove'
    
    # - name: Check the Node id of dicarding node
    #   command: |-
    #     redis-cli -h  {{remove_node_ip}}  -p {{remove_node_port}} -a {{redis_password}} cluster myid
    #   register: remove_node_id
    #   when: >
    #      not remove_node_id.stat.exists and  node_status == "remove" 

    - name: Check the Node id of transfer node
      command: |-
        redis-cli -h  {{ansible_ssh_host}}  -p {{redis_port}} -a {{redis_password}} cluster myid
      register: transfer_node_id
      when: >
        not transfer_node_id.stat.exists and node_status == "ready"       
    
    - name:  Reshard the Node to be removed 
      command: |-
        {{ redis_command }} --cluster reshard {{ansible_ssh_host}}:{{redis_port}} 
        --cluster-from {{item.split(' ')[0]}} --cluster-to {{transfer_node_id}} 
        --cluster-slots {{ expr $(item.split(" ")[-1]) - $(item.split(" ")[-2])}} --cluster-yes
      when: node_status == 'remove'
      with_items: 
        - "{{ lookup('file', '/tmp/node-removal') }}"

    - name: Rebalance the Redis cluster
      command: |- 
        redis-cli -h  {{ansible_ssh_host}}  -p {{redis_port}} -a {{redis_password}}  --cluster rebalance {{ansible_ssh_host}}:{{redis_port}}
      when: node_status == "ready"

    - name: Ensuring the removed marked nodes are not part of the cluster
      command: |-
        {{ redis_command }} --cluster del-node
        {{ ansible_ssh_host }}:{{ leader_redis_port }} {{ item.split(' ')[0] }}
      with_items:
        - "{{ lookup('file', '/tmp/node-removal') }}"
      when: >
        inventory_hostname in groups['leader'][0] and
        lookup('file', '/tmp/node-removal')|length > 0

    - name: Ensuring the temporary file is removed after execution
      local_action:
        module: file
        path: /tmp/node-removal
        state: absent
